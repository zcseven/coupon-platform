// Code generated by goctl. DO NOT EDIT.

package OrderListModel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	orderListFieldNames          = builder.RawFieldNames(&OrderList{})
	orderListRows                = strings.Join(orderListFieldNames, ",")
	orderListRowsExpectAutoSet   = strings.Join(stringx.Remove(orderListFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	orderListRowsWithPlaceHolder = strings.Join(stringx.Remove(orderListFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	orderListModel interface {
		Insert(ctx context.Context, data *OrderList) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*OrderList, error)
		Update(ctx context.Context, data *OrderList) error
		Delete(ctx context.Context, id int64) error
	}

	defaultOrderListModel struct {
		conn  sqlx.SqlConn
		table string
	}

	OrderList struct {
		Id       int64     `db:"id"`
		Uid      int64     `db:"uid"`       // 用户uid
		OrderSn  string    `db:"order_sn"`  // 订单号
		TradeNo  string    `db:"trade_no"`  // 交易号
		IsActive int64     `db:"is_active"` // 有效性
		CreateAt time.Time `db:"create_at"`
	}
)

func newOrderListModel(conn sqlx.SqlConn) *defaultOrderListModel {
	return &defaultOrderListModel{
		conn:  conn,
		table: "`order_list`",
	}
}

func (m *defaultOrderListModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultOrderListModel) FindOne(ctx context.Context, id int64) (*OrderList, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", orderListRows, m.table)
	var resp OrderList
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOrderListModel) Insert(ctx context.Context, data *OrderList) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, orderListRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Uid, data.OrderSn, data.TradeNo, data.IsActive)
	return ret, err
}

func (m *defaultOrderListModel) Update(ctx context.Context, data *OrderList) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, orderListRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Uid, data.OrderSn, data.TradeNo, data.IsActive, data.Id)
	return err
}

func (m *defaultOrderListModel) tableName() string {
	return m.table
}
